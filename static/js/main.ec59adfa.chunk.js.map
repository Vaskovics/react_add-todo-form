{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","todos","map","getUser","userId","usersFromServer","find","getTodos","App","useState","selectedId","setSelectedId","newTitile","setNewTitle","setTodos","noTitleError","setNoTitleError","noUserError","setNoUserError","action","method","onSubmit","event","preventDefault","newTodo","Math","max","el","type","onChange","target","value","replace","placeholder","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ec59adfa.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames(\n      'TodoInfo',\n      { 'TodoInfo--completed': todo.completed },\n    )}\n  >\n    <h2 className=\"TodoInfo__title\">\n      { todo.title}\n    </h2>\n    {todo.user && (\n      <UserInfo user={todo.user} />\n    )}\n  </article>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const getTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App = () => {\n  const [selectedId, setSelectedId] = useState('0');\n  const [newTitile, setNewTitle] = useState('');\n  const [todos, setTodos] = useState(getTodos);\n  const [noTitleError, setNoTitleError] = useState(true);\n  const [noUserError, setNoUserError] = useState(true);\n\n  const selectHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    setSelectedId(event.target.value);\n    setNoUserError(true);\n  };\n\n  const titleHandler = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setNewTitle(event.target.value.replace(/[^\\w\\s]/gi, ''));\n    setNoTitleError(true);\n  };\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!newTitile) {\n      setNoTitleError(false);\n    }\n\n    if (selectedId === '0') {\n      setNoUserError(false);\n    }\n\n    if (!newTitile || selectedId === '0') {\n      return;\n    }\n\n    const maxId = Math.max(...todos.map(el => el.id)) + 1;\n\n    const newTodo = {\n      completed: false,\n      id: maxId,\n      title: newTitile,\n      user: getUser(+selectedId),\n      userId: selectedId,\n    };\n\n    setTodos([...todos, newTodo]);\n\n    setNewTitle('');\n    setSelectedId('0');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={submitHandler}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            onChange={titleHandler}\n            value={newTitile}\n            placeholder=\"Enter a title\"\n          />\n          {noTitleError\n            || (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            onChange={selectHandler}\n            value={selectedId}\n          >\n            <option key={0} value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option key={user.name} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {noUserError\n            || (<span className=\"error\">Please choose a user</span>)}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}